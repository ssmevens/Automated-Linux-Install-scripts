#preseed working (Mint 22.1)

d-i     localechooser/supported-locales    en_US.UTF-8
d-i     keyboard-configuration/xkb-keymap  select us
d-i     keyboard-configuration/layoutcode  string us

d-i     debian-installer/splash            boolean false
d-i     console-setup/ask_detect           boolean false
d-i     console-setup/layoutcode           string us
d-i     console-setup/variantcode          string

# netcfg will choose an interface that has link if possible. This makes it
# skip displaying a list if there is more than one interface.
d-i netcfg/choose_interface select auto

# To set a different link detection timeout (default is 3 seconds).
# Values are interpreted as seconds.
d-i netcfg/link_wait_timeout string 5

# Any hostname and domain names assigned from dhcp take precedence over
# values set here. However, setting the values still prevents the questions
# from being shown, even if values come from dhcp.
d-i netcfg/get_hostname string mint-workstation-temp
d-i netcfg/get_domain string its-ia.com

# If non-free firmware is needed for the network or other hardware, you can
# configure the installer to always try to load it, without prompting. Or
# change to false to disable asking.
d-i hw-detect/load_firmware boolean true

### Partitioning
# If the system has free space you can choose to only partition that space.
# This is only honoured if partman-auto/method (below) is not set.
#d-i partman-auto/init_automatically_partition select biggest_free

# Alternatively, you may specify a disk to partition. If the system has only
# one disk the installer will default to using that, but otherwise the device
# name must be given in traditional, non-devfs format (so e.g. /dev/sda
# and not e.g. /dev/discs/disc0/disc).
# For example, to use the first SCSI/SATA hard disk:
#d-i partman-auto/disk string /dev/sda
# In addition, you'll need to specify the method to use.
# The presently available methods are:
# - regular: use the usual partition types for your architecture
# - lvm:     use LVM to partition the disk
# - crypto:  use LVM within an encrypted partition
d-i partman-auto/method string regular

# You can choose one of the three predefined partitioning recipes:
# - atomic: all files in one partition
# - home:   separate /home partition
# - multi:  separate /home, /var, and /tmp partitions
d-i partman-auto/choose_recipe select atomic

d-i     partman/default_filesystem                     string ext4
d-i     partman/choose_partition                       select finish

# If one of the disks that are going to be automatically partitioned
# contains an old LVM configuration, the user will normally receive a
# warning. This can be preseeded away...
d-i partman-lvm/device_remove_lvm boolean true
# The same applies to pre-existing software RAID array:
d-i partman-md/device_remove_md boolean true
# And the same goes for the confirmation to write the lvm partitions.
d-i partman-lvm/confirm             boolean true
d-i partman-lvm/confirm_nooverwrite boolean true

# Just in case, the positive answer to all other imagineable conformation questions:
d-i     partman-partitioning/confirm_write_new_label   boolean true
d-i     partman/confirm                                boolean true
d-i     partman/confirm_nooverwrite                    boolean true
d-i     partman/confirm_write_new_label                boolean true
d-i     partman-md/confirm                             boolean true

# Time
d-i     time/zone               string  America/Chicago
d-i     clock-setup/utc         boolean true
d-i     clock-setup/ntp         boolean true
d-i     clock-setup/ntp-server  string ntp.ubuntu.com

#   LinuxMint will *demand* a user during installation, ignoring the value
#   of the passwd/make-user flag, so we need to provide the user data here.
#   You should not preseed the password in clear text, this is just an example!
d-i     passwd/user-fullname            string adm1n
d-i     passwd/username                 string adm1n
#d-i     passwd/user-password            password {clear-text-pass}
#d-i     passwd/user-password-again      password {clear-text-pass}
#d-i     user-setup/allow-password-weak  boolean true
d-i passwd/user-password-crypted password $6$xwTEL9gt.8meWBVv$A43hrwPogNviFmVG9PJJGWLlZvyrQUpuf70n3Qj25NlMIVJe5YWEOXhOEsvl0RW9OPN7GdilMEPJVuS./wYqW0
d-i     user-setup/encrypt-home         boolean false

# Use non-free packages
ubiquity ubiquity/use_nonfree boolean true

# -------- Customize at the end of a successful installation.
#ubiquity ubiquity/success_command string \
 # in-target sh -c 'ip addr > /root/ip_info.txt'; \
  #in-target sh -c 'ping -c 4 192.168.69.203 > /root/ping.txt'; \
  #in-target sh -c 'wget -O /root/setup-mint.sh http://192.168.69.203/d-i/mint/setup-mint.sh > /root/wget.log 2>&1'; \
  #in-target sh -c 'chmod +x /root/setup-mint.sh'; \
  #in-target sh -c '/bin/sh /root/setup-mint.sh';



#This was the only way I could figure out how to get my script onto the host. 
ubiquity ubiquity/success_command string \
  mount --bind /dev /target/dev; \
  mount --bind /proc /target/proc; \
  mount --bind /sys /target/sys; \
  chroot /target sh -c 'dhclient; \
  rm -f /etc/resolv.conf; \
  echo "nameserver 8.8.8.8" > /etc/resolv.conf; \
  wget http://192.168.69.203/d-i/mint/setup-mint.sh -O /root/setup-mint.sh; \
  chmod +x /root/setup-mint.sh; \
  /bin/sh /root/setup-mint.sh > /root/install.log 2>&1'; \
  umount /target/dev /target/proc /target/sys;





# Ubiquity completly ignores the debian installer command 'preseed/late_command',


# instead we need to use 'ubiquity/success_command'.
#ubiquity ubiquity/success_command string \
 # in-target wget -O /root/setup-mint.sh http://192.168.69.203/d-i/mint/setup-mint.sh; \
 # in-target apt update; \
 # in-target sh -c 'apt -y dist-upgrade'; \
 # in-target chmod +x /root/setup-mint.sh; \
 # in-target /bin/sh /root/setup-mint.sh;

# Finish off the install by rebooting the freshly installed Linux Mint desktop
d-i  ubiquity/reboot  boolean true
